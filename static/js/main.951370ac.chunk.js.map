{"version":3,"sources":["models/todoStore.ts","components/Todo.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["Todo","types","model","text","string","completed","id","identifierNumber","actions","self","complete","TodoStore","todos","array","filter","optional","views","getFilteredTodos","todo","startsWith","addTodo","reduce","maxId","Math","max","unshift","setFilter","StyledTodo","styled","div","props","StyledTodoText","span","StyledTodoCheckbox","input","observer","type","onChange","checked","StyledHeader","form","StyledInput","StyledButton","button","Header","store","useState","setText","handleClick","length","slice","onSubmit","e","preventDefault","value","target","setTimeout","StyledWrapper","section","StyledApp","App","map","create","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAEMA,EAAOC,IACVC,MAAM,CACLC,KAAMF,IAAMG,OACZC,WAAW,EACXC,GAAIL,IAAMM,mBAEXC,SAAQ,SAACC,GAAD,MAAW,CAClBC,SADkB,WAEhBD,EAAKJ,WAAaI,EAAKJ,eA8BdM,EA1BGV,IACfC,MAAM,CACLU,MAAOX,IAAMY,MAAMb,GACnBc,OAAQb,IAAMc,SAASd,IAAMG,OAAQ,MAEtCY,OAAM,SAACP,GAAD,MAAW,CAChBQ,iBADgB,WAEd,OAAOR,EAAKG,MAAME,QAAO,SAAAI,GAAI,OAAIA,EAAKf,KAAKgB,WAAWV,EAAKK,gBAG9DN,SAAQ,SAACC,GAAD,MAAW,CAClBW,QADkB,SACVjB,GACN,IAAMG,EAAKG,EAAKG,MAAMS,QAAO,SAACC,EAAOJ,GAAR,OAAiBK,KAAKC,IAAIN,EAAKZ,GAAIgB,MAAS,GAAK,EAC9Eb,EAAKG,MAAMa,QAAQ,CACjBtB,OACAG,QAGJoB,UARkB,SAQRvB,GACRM,EAAKK,OAASX,O,klBClBpB,IAAMwB,EAAaC,IAAOC,IAAV,KAcF,SAAAC,GAAK,OAAIA,EAAMzB,UAAY,MAAQ,OAI3C0B,EAAiBH,IAAOI,KAAV,KAIC,SAAAF,GAAK,OAAIA,EAAMzB,UAAY,eAAiB,MAG3D4B,EAAqBL,IAAOM,MAAV,KAcTlC,EAVFmC,aAAS,YAAsD,IAA7BjB,EAA4B,EAA5BA,KAE7C,OACE,eAACS,EAAD,CAAYtB,UAAWa,EAAKb,UAA5B,UACE,cAAC0B,EAAD,CAAgB1B,UAAWa,EAAKb,UAAhC,SAA4Ca,EAAKf,OACjD,cAAC8B,EAAD,CAAoBG,KAAK,WAAWC,SAAUnB,EAAKR,SAAU4B,QAASpB,EAAKb,kB,qqBCtCjF,IAAMkC,EAAeX,IAAOY,KAAV,KAKZC,EAAcb,IAAOM,MAAV,KAeXQ,EAAed,IAAOe,OAAV,KAqDHC,EAhCAT,aAAS,YAA2D,IAAhCU,EAA+B,EAA/BA,MAA+B,EAExDC,mBAAS,IAF+C,mBAEzE3C,EAFyE,KAEnE4C,EAFmE,KAgBhF,IAAMC,EAAc,WACd7C,EAAK8C,OAAS,IAChBJ,EAAMzB,QAAQjB,EAAK+C,MAAM,EAAG,KAC5BH,EAAQ,IACRF,EAAMnB,UAAU,MAIpB,OACE,eAACa,EAAD,CAAcY,SAdhB,SAAsBC,GACpBA,EAAEC,iBACFL,KAYA,UACE,cAACP,EAAD,CAAaL,KAAK,OAAOkB,MAAOnD,EAAMkC,SAtB1C,SAAsBe,GACpBL,EAAQK,EAAEG,OAAOD,OACjBE,YAAW,WACTX,EAAMnB,UAAU0B,EAAEG,OAAOD,SACxB,QAmBD,cAACZ,EAAD,sB,iXClEN,IAAMe,EAAgB7B,IAAO8B,QAAV,KAObC,EAAY/B,IAAOC,IAAV,KAsBA+B,EAdHzB,aAAS,YAAsD,IAA9BU,EAA6B,EAA7BA,MAC3C,OACE,cAACY,EAAD,UACE,eAACE,EAAD,WACE,cAAC,EAAD,CAAQd,MAAOA,IACf,8BACGA,EAAM5B,mBAAmB4C,KAAI,SAAC3C,GAAD,OAAe,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKZ,iBC3BjEuC,EAAQlC,EAAUmD,SAGxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKpB,MAAOA,MAEdqB,SAASC,eAAe,W","file":"static/js/main.951370ac.chunk.js","sourcesContent":["import { types } from \"mobx-state-tree\"\r\n\r\nconst Todo = types\r\n  .model({\r\n    text: types.string,\r\n    completed: false,\r\n    id: types.identifierNumber\r\n  })\r\n  .actions((self) => ({\r\n    complete(): void {\r\n      self.completed = !self.completed\r\n    }\r\n  }))\r\n\r\nconst TodoStore = types\r\n  .model({\r\n    todos: types.array(Todo),\r\n    filter: types.optional(types.string, \"\")\r\n  })\r\n  .views((self) => ({\r\n    getFilteredTodos(): TodoType[]{\r\n      return self.todos.filter(todo => todo.text.startsWith(self.filter))\r\n    }\r\n  }))\r\n  .actions((self) => ({\r\n    addTodo(text: string): void {\r\n      const id = self.todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1\r\n      self.todos.unshift({\r\n        text,\r\n        id\r\n      })\r\n    },\r\n    setFilter(text: string): void {\r\n      self.filter = text\r\n    }\r\n  }))\r\n\r\nexport type TodoType = {text: string, completed: boolean, id: number, complete: any}\r\nexport type TodoStoreType = {todos: TodoType[], filter: string, addTodo: any, setFilter: any, getFilteredTodos: any}\r\n\r\nexport default TodoStore","import React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { observer } from \"mobx-react\"\r\n\r\nimport { TodoType } from \"../models/todoStore\"\r\n\r\ninterface TodoComponentProps {\r\n  todo: TodoType,\r\n}\r\n\r\ninterface StyledTodoProps {\r\n  readonly completed: boolean;\r\n}\r\n\r\nconst StyledTodo = styled.div<StyledTodoProps>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  padding: 0.5rem;\r\n  margin: 0.5rem;\r\n\r\n  font-size: 1.5rem;\r\n  background: black;\r\n  border-radius: 5rem;\r\n  min-width: 200px;\r\n  transition: 1s opacity ease;\r\n\r\n  opacity:  ${props => props.completed ? \"0.5\" : \"1\" };\r\n\r\n`\r\n\r\nconst StyledTodoText = styled.span<StyledTodoProps>`\r\n  transition: 1s all ease;\r\n  \r\n  color: white;\r\n  text-decoration: ${props => props.completed ? \"line-through\" : \"\"};\r\n`\r\n\r\nconst StyledTodoCheckbox = styled.input`\r\n  margin-right: 15px;\r\n`\r\n\r\nconst Todo = observer(function TodoComponent({ todo }: TodoComponentProps) {\r\n\r\n  return (\r\n    <StyledTodo completed={todo.completed}>\r\n      <StyledTodoText completed={todo.completed}>{todo.text}</StyledTodoText>\r\n      <StyledTodoCheckbox type=\"checkbox\" onChange={todo.complete} checked={todo.completed}/>\r\n    </StyledTodo>\r\n  )\r\n})\r\n\r\nexport default Todo\r\n","import React, { useState } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { observer } from \"mobx-react\"\r\nimport { TodoStoreType } from \"../models/todoStore\"\r\n\r\n\r\ninterface HeaderComponentProps {\r\n  store: TodoStoreType\r\n}\r\n\r\nconst StyledHeader = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  border-radius: 5rem;\r\n  width: 300px;\r\n\r\n  padding: 1rem;\r\n\r\n  font-size: 2rem;\r\n\r\n  border: none;\r\n  outline: none;\r\n\r\n  background: black;\r\n  color: white;\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  background: black;\r\n  color: white;\r\n\r\n  border-radius: 50%;\r\n  margin-left: 20px;\r\n\r\n  min-width: 64px;\r\n  font-size: 50px;\r\n\r\n  border: none;\r\n  outline: none;\r\n\r\n  opacity: 1;\r\n  transition: opacity .5s; \r\n\r\n  &:hover {\r\n    opacity: .5;\r\n  }\r\n`\r\n\r\nconst Header = observer(function HeaderComponent({ store }: HeaderComponentProps) {\r\n\r\n  const [text, setText] = useState(\"\")\r\n\r\n  function handleChange(e : any): void {\r\n    setText(e.target.value)\r\n    setTimeout(() => {\r\n      store.setFilter(e.target.value)\r\n    }, 500)\r\n  }\r\n\r\n  function handleSubmit(e : any): void {\r\n    e.preventDefault()\r\n    handleClick()\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (text.length > 0) {\r\n      store.addTodo(text.slice(0, 57))\r\n      setText(\"\")\r\n      store.setFilter(\"\")\r\n    } \r\n  }\r\n\r\n  return (\r\n    <StyledHeader onSubmit={handleSubmit}>\r\n      <StyledInput type=\"text\" value={text} onChange={handleChange}/>\r\n      <StyledButton>+</StyledButton>\r\n    </StyledHeader>\r\n  )\r\n})\r\n\r\nexport default Header\r\n\r\n","import React from 'react';\nimport { observer } from \"mobx-react\"\nimport styled from 'styled-components'\n\nimport { TodoStoreType } from \"./models/todoStore\"\n\nimport Todo from \"./components/Todo\"\nimport Header from \"./components/Header\"\n\nexport interface AppComponentProps {\n  store: TodoStoreType\n}\n\nconst StyledWrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  min-height: 100vh;\n  background-image: linear-gradient(90deg, #ee5c87, #f1a4b5, #d587b3);\n`\n\nconst StyledApp = styled.div`\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n  margin-top: 5rem;\n`\n\n\nconst App = observer(function AppComponent({ store } : AppComponentProps) {\n  return (\n    <StyledWrapper>\n      <StyledApp>\n        <Header store={store}/>\n        <div>\n          {store.getFilteredTodos().map((todo: any) => <Todo key={todo.id} todo={todo}/>)}\n        </div>\n      </StyledApp>\n    </StyledWrapper>\n  );\n})\n\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\"\nimport TodoStore from \"./models/todoStore\"\n\nimport App from './App';\n\nconst store = TodoStore.create()\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}